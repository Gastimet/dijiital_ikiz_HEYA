import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import time
import json
import os
from datetime import datetime

class DarkCrawlerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Web Crawler - Dark Mode")
        self.root.geometry("600x500")
        self.root.configure(bg='black')
        
        # Crawling durumu
        self.is_crawling = False
        self.active_crawlers = 0
        
        self.setup_dark_theme()
        self.setup_ui()
        
    def setup_dark_theme(self):
        style = ttk.Style()
        style.theme_use('clam')
        
        # Dark theme colors
        style.configure('.', background='black', foreground='white')
        style.configure('TFrame', background='black')
        style.configure('TLabel', background='black', foreground='white')
        style.configure('TButton', background='#333333', foreground='white')
        style.configure('TEntry', fieldbackground='#333333', foreground='white')
        style.configure('TCheckbutton', background='black', foreground='white')
        style.configure('TProgressbar', background='#0066cc', troughcolor='#333333')
        
    def setup_ui(self):
        # Ana frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Üst kısım - Kontroller
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Kişi ismi girişi
        ttk.Label(control_frame, text="Kişi İsmi:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.name_entry = ttk.Entry(control_frame, width=40)
        self.name_entry.grid(row=0, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5, padx=(5, 0))
        
        # Site seçimleri
        ttk.Label(control_frame, text="Hedef Siteler:").grid(row=1, column=0, sticky=tk.W, pady=5)
        
        sites_frame = ttk.Frame(control_frame)
        sites_frame.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        self.site_vars = {}
        sites = [
            ("PDF Dosyaları", "pdf"),
            ("Wikipedia", "wikipedia"),
            ("Twitter", "twitter"),
            ("LinkedIn", "linkedin"),
            ("OCR to Text", "ocr")
        ]
        
        for i, (site_name, site_key) in enumerate(sites):
            var = tk.BooleanVar()
            chk = ttk.Checkbutton(sites_frame, text=site_name, variable=var)
            chk.grid(row=0, column=i, sticky=tk.W, padx=(0, 15))
            self.site_vars[site_key] = var
        
        # Butonlar
        button_frame = ttk.Frame(control_frame)
        button_frame.grid(row=2, column=0, columnspan=3, pady=15)
        
        self.start_btn = ttk.Button(button_frame, text="Taramayı Başlat", command=self.start_crawling)
        self.start_btn.pack(side=tk.LEFT, padx=5)
        
        self.stop_btn = ttk.Button(button_frame, text="Taramayı Durdur", command=self.stop_crawling, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=5)
        
        self.download_btn = ttk.Button(button_frame, text="Sonuçları İndir", command=self.download_results)
        self.download_btn.pack(side=tk.LEFT, padx=5)
        
        # Aktif tarama sayısı
        status_frame = ttk.Frame(control_frame)
        status_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        self.active_label = ttk.Label(status_frame, text="Aktif tarama sayısı: 0", foreground="#00ff00")
        self.active_label.pack(side=tk.LEFT)
        
        # Progress bar
        self.progress = ttk.Progressbar(control_frame, mode='indeterminate')
        self.progress.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # Ayrıcı çizgi
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=10)
        
        # Alt kısım - Log alanı (EN AŞAĞIDA)
        log_frame = ttk.Frame(main_frame)
        log_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        
        ttk.Label(log_frame, text="İşlem Logları:", font=('Arial', 10, 'bold')).pack(anchor=tk.W)
        
        # Log text alanı
        log_text_frame = ttk.Frame(log_frame)
        log_text_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
        
        self.log_text = tk.Text(
            log_text_frame, 
            height=15, 
            width=70,
            bg='#1a1a1a',
            fg='#00ff00',
            insertbackground='white',
            selectbackground='#0066cc',
            font=('Consolas', 9)
        )
        
        scrollbar = ttk.Scrollbar(log_text_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Grid configuration
        control_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)  # Log alanı genişlesin
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def start_crawling(self):
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showerror("Hata", "Lütfen bir isim giriniz.")
            return
            
        selected_sites = [site for site, var in self.site_vars.items() if var.get()]
        if not selected_sites:
            messagebox.showerror("Hata", "Lütfen en az bir site seçiniz.")
            return
        
        self.is_crawling = True
        self.active_crawlers = len(selected_sites)
        self.update_ui_state()
        
        self.log_message("═" * 50)
        self.log_message(f"🎯 TARAMA BAŞLATILDI: {name}")
        self.log_message(f"📡 HEDEF SİTELER: {', '.join(selected_sites).upper()}")
        self.log_message("═" * 50)
        
        # Simüle edilmiş crawling işlemi
        self.crawling_thread = threading.Thread(target=self.simulate_crawling, args=(name, selected_sites))
        self.crawling_thread.daemon = True
        self.crawling_thread.start()
        
    def stop_crawling(self):
        self.is_crawling = False
        self.log_message("🛑 TARAMA DURDURULUYOR...")
        self.update_ui_state()
        
    def download_results(self):
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            # Örnek veri oluştur
            sample_data = {
                "name": self.name_entry.get(),
                "crawled_at": datetime.now().isoformat(),
                "results": {
                    "pdf": ["document1.pdf", "document2.pdf"],
                    "wikipedia": ["Wikipedia entry found"],
                    "twitter": ["Recent tweets extracted"],
                    "linkedin": ["Profile information gathered"],
                    "ocr": ["Text extracted from images"]
                }
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(sample_data, f, ensure_ascii=False, indent=2)
            
            self.log_message(f"💾 SONUÇLAR İNDİRİLDİ: {filename}")
            messagebox.showinfo("Başarılı", f"Sonuçlar {filename} dosyasına kaydedildi.")
        
    def simulate_crawling(self, name, sites):
        self.progress.start()
        
        for i, site in enumerate(sites):
            if not self.is_crawling:
                break
                
            self.log_message(f"🔍 {site.upper()} TARAMASI BAŞLADI...")
            
            # Simüle edilmiş tarama süresi
            for step in range(5):
                if not self.is_crawling:
                    break
                time.sleep(1)
                progress_percent = (step + 1) * 20
                self.log_message(f"   📊 {site}: %{progress_percent} tamamlandı")
            
            if self.is_crawling:
                self.log_message(f"✅ {site.upper()} TARAMASI TAMAMLANDI")
                self.active_crawlers -= 1
                self.update_active_count()
        
        self.progress.stop()
        self.is_crawling = False
        self.update_ui_state()
        
        if self.active_crawlers == 0:
            self.log_message("🎉 TÜM TARAMALAR BAŞARIYLA TAMAMLANDI!")
            self.log_message("═" * 50)
        
    def update_ui_state(self):
        if self.is_crawling:
            self.start_btn.config(state=tk.DISABLED)
            self.stop_btn.config(state=tk.NORMAL)
            self.download_btn.config(state=tk.DISABLED)
            self.active_label.config(foreground="#ff9900")  # Turuncu
        else:
            self.start_btn.config(state=tk.NORMAL)
            self.stop_btn.config(state=tk.DISABLED)
            self.download_btn.config(state=tk.NORMAL)
            self.active_label.config(foreground="#00ff00")  # Yeşil
            
    def update_active_count(self):
        self.active_label.config(text=f"Aktif tarama sayısı: {self.active_crawlers}")
        self.root.update()

def main():
    root = tk.Tk()
    app = DarkCrawlerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
