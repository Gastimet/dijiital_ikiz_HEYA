import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import subprocess
import sys
from datetime import datetime, timezone
from pymongo import MongoClient, errors

# ==== MongoDB Ayarlarƒ± ====
MONGO_URI = "mongodb://localhost:27017"
DB_NAME = "web_crawler"
COLL_NAME = "persons"


class ModernWebCrawlerUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Web Crawler")
        self.root.geometry("1200x800")
        self.root.configure(bg='#1e1e1e')

        self.mongo_client = None
        self.mongo_db = None
        self.mongo_coll = None

        self.colors = {
            'bg': '#1e1e1e', 'card_bg': '#2d2d2d', 'accent': '#007acc',
            'success': '#00d26a', 'warning': '#ffa500', 'error': '#ff4444',
            'info': '#00bfff', 'text': '#ffffff', 'text_secondary': '#cccccc',
            'button_primary': '#007acc', 'button_secondary': '#6c757d',
            'button_success': '#28a745', 'button_danger': '#dc3545',
            'log_bg': '#1a1a1a', 'log_even': '#1f1f1f', 'log_odd': '#242424',
            'log_number': '#ffd700', 'log_time': '#00ff00',
            'log_success': '#90ee90', 'log_error': '#ff6b6b',
            'log_warning': '#ffd700', 'log_info': '#87ceeb'
        }

        self.setup_ui()
        self._init_mongo()

    # ----------------- MongoDB -----------------
    def _init_mongo(self):
        try:
            self.mongo_client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=3000)
            self.mongo_client.admin.command("ping")
            self.mongo_db = self.mongo_client[DB_NAME]
            self.mongo_coll = self.mongo_db[COLL_NAME]
            try:
                self.mongo_coll.create_index("person", background=True)
            except Exception:
                pass
            self.add_log(f"MongoDB baƒülandƒ± ‚Üí {DB_NAME}.{COLL_NAME}", "success", "üü¢")
        except Exception as e:
            self.mongo_client = None
            self.mongo_db = None
            self.mongo_coll = None
            self.add_log(f"MongoDB baƒülantƒ± hatasƒ±: {e}", "error", "üî¥")
            messagebox.showerror("MongoDB", f"Baƒülantƒ± kurulamadƒ±:\n{e}")

    # ----------------- UI -----------------
    def setup_ui(self):
        title_frame = tk.Frame(self.root, bg=self.colors['card_bg'])
        title_frame.pack(fill='x', padx=20, pady=15)
        tk.Label(title_frame, text="Web Crawler", font=('Arial', 24, 'bold'),
                 fg=self.colors['accent'], bg=self.colors['card_bg'], pady=12).pack()

        top_frame = tk.Frame(self.root, bg=self.colors['bg'])
        top_frame.pack(fill='x', padx=20, pady=10)
        left_frame = tk.Frame(top_frame, bg=self.colors['bg'])
        left_frame.pack(side='left', fill='both', expand=True)
        right_frame = tk.Frame(top_frame, bg=self.colors['bg'])
        right_frame.pack(side='right', fill='both', expand=True)

        self.setup_person_sources_section(left_frame)
        self.setup_progress_section(right_frame)
        self.setup_buttons()
        self.setup_logs_section()

    def setup_person_sources_section(self, parent):
        main_frame = tk.LabelFrame(parent, text=" Ayarlar", font=('Arial', 12, 'bold'),
                                   fg=self.colors['text'], bg=self.colors['card_bg'],
                                   bd=2, relief='flat', highlightbackground=self.colors['accent'],
                                   highlightthickness=2)
        main_frame.pack(fill='both', expand=True)

        person_frame = tk.Frame(main_frame, bg=self.colors['card_bg'])
        person_frame.pack(fill='x', padx=15, pady=12)
        tk.Label(person_frame, text="Ki≈üi ƒ∞smi:", font=('Arial', 11, 'bold'),
                 fg=self.colors['text'], bg=self.colors['card_bg'], anchor='w').pack(fill='x', pady=(0, 5))
        self.person_name = tk.Entry(person_frame, font=('Arial', 11), bg='#3d3d3d',
                                    fg=self.colors['text'], insertbackground=self.colors['text'],
                                    relief='flat', bd=2)
        self.person_name.pack(fill='x', pady=5)
        self.person_name.insert(0, "Sadƒ±k")

        tk.Frame(main_frame, bg='#444444', height=1).pack(fill='x', padx=10, pady=8)

        sources_title_frame = tk.Frame(main_frame, bg=self.colors['card_bg'])
        sources_title_frame.pack(fill='x', padx=15, pady=(0, 8))
        tk.Label(sources_title_frame, text="Veri Kaynaklarƒ±:", font=('Arial', 11, 'bold'),
                 fg=self.colors['text'], bg=self.colors['card_bg'], anchor='w').pack(fill='x')

        sources = [
            ("üìÑ", "PDF Derleyen"),
            ("üåê", "Wikipedia"),
            ("üê¶", "Twitter"),
            ("üíº", "LinkedIn"),
            ("üîç", "OCR To Text"),
            ("üì∫", "YouTube")
        ]

        self.source_entries = {}
        sources_inner_frame = tk.Frame(main_frame, bg=self.colors['card_bg'])
        sources_inner_frame.pack(fill='x', padx=15, pady=8)

        placeholders = {
            "PDF Derleyen": "PDF dosya yolu veya URL",
            "Wikipedia": "Wikipedia sayfa baƒülantƒ±sƒ±",
            "Twitter": "Twitter kullanƒ±cƒ± adƒ± veya URL",
            "LinkedIn": "LinkedIn profil baƒülantƒ±sƒ±",
            "OCR To Text": "OCR i√ßin g√∂rsel dosya yolu",
            "YouTube": "YouTube kanal URL'si veya video linki"
        }

        for icon, text in sources:
            source_frame = tk.Frame(sources_inner_frame, bg=self.colors['card_bg'])
            source_frame.pack(fill='x', pady=4)
            tk.Label(source_frame, text=f"{icon} {text}:", font=('Arial', 10, 'bold'),
                     fg=self.colors['text'], bg=self.colors['card_bg'], width=15, anchor='w').pack(side='left', padx=(0, 10))

            entry = tk.Entry(source_frame, font=('Arial', 10), bg='#3d3d3d', fg=self.colors['text'],
                             insertbackground=self.colors['text'], relief='flat', bd=1)
            entry.pack(side='left', fill='x', expand=True, padx=5)

            if text in placeholders:
                entry.insert(0, placeholders[text])
                entry.config(fg=self.colors['text_secondary'])

                def on_focus_in(event, e=entry, default_text=placeholders[text]):
                    if e.get() == default_text:
                        e.delete(0, tk.END)
                        e.config(fg=self.colors['text'])

                def on_focus_out(event, e=entry, default_text=placeholders[text]):
                    if not e.get():
                        e.insert(0, default_text)
                        e.config(fg=self.colors['text_secondary'])

                entry.bind('<FocusIn>', on_focus_in)
                entry.bind('<FocusOut>', on_focus_out)

            self.source_entries[text] = entry

    def setup_progress_section(self, parent):
        progress_frame = tk.LabelFrame(parent, text=" Tarama ƒ∞lerlemesi", font=('Arial', 12, 'bold'),
                                       fg=self.colors['text'], bg=self.colors['card_bg'], bd=2, relief='flat',
                                       highlightbackground=self.colors['accent'], highlightthickness=2)
        progress_frame.pack(fill='both', expand=True, padx=(10, 0))
        inner = tk.Frame(progress_frame, bg=self.colors['card_bg'])
        inner.pack(fill='both', expand=True, padx=12, pady=12)
        header = tk.Frame(inner, bg=self.colors['card_bg'])
        header.pack(fill='x', pady=5)
        tk.Label(header, text="Durum:", font=('Arial', 10, 'bold'),
                 fg=self.colors['text'], bg=self.colors['card_bg']).pack(side='left')
        self.status_text = tk.Label(header, text="0/361 tamamlandƒ±", font=('Arial', 10, 'bold'),
                                    fg=self.colors['warning'], bg=self.colors['card_bg'])
        self.status_text.pack(side='right')
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("Custom.Horizontal.TProgressbar", background=self.colors['success'],
                        troughcolor='#3d3d3d', bordercolor=self.colors['accent'],
                        lightcolor=self.colors['success'], darkcolor=self.colors['success'])
        self.progress = ttk.Progressbar(inner, orient='horizontal', mode='determinate', maximum=361,
                                        style="Custom.Horizontal.TProgressbar")
        self.progress.pack(fill='x', pady=8)
        self.progress['value'] = 0

    def setup_buttons(self):
        button_frame = tk.Frame(self.root, bg=self.colors['bg'])
        button_frame.pack(pady=15)
        buttons = [
            ("üöÄ Ba≈ülat", self.start_crawl, self.colors['button_success'], 14),
            ("üîÑ Yeniden Ba≈ülat", self.restart_crawl, self.colors['button_primary'], 12),
            ("‚èπÔ∏è Durdur", self.stop_crawl, self.colors['button_danger'], 12),
            ("üìä Rapor Al", self.generate_report, self.colors['button_secondary'], 12),
            ("üíæ Veri Tabanƒ±na Ekle", self.add_to_database, self.colors['info'], 12)
        ]
        for text, command, color, font_size in buttons:
            btn = tk.Button(button_frame, text=text, command=command, font=('Arial', font_size, 'bold'),
                            bg=color, fg='white', relief='raised', bd=0, padx=20, pady=10, cursor='hand2')
            btn.pack(side='left', padx=8, pady=5)
            btn.bind("<Enter>", lambda e, b=btn: b.config(bg=self.lighten_color(b['bg'])))
            btn.bind("<Leave>", lambda e, b=btn, c=color: b.config(bg=c))

    def setup_logs_section(self):
        logs_frame = tk.LabelFrame(self.root, text=" üìã ƒ∞≈ülem Loglarƒ±", font=('Arial', 14, 'bold'),
                                   fg=self.colors['text'], bg=self.colors['card_bg'], bd=2, relief='flat',
                                   highlightbackground=self.colors['accent'], highlightthickness=2)
        logs_frame.pack(fill='both', expand=True, padx=20, pady=(10, 20))
        container = tk.Frame(logs_frame, bg=self.colors['card_bg'])
        container.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        scrollbar = ttk.Scrollbar(container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_canvas = tk.Canvas(container, bg=self.colors['log_bg'], yscrollcommand=scrollbar.set,
                                    highlightthickness=0, relief='flat')
        self.log_canvas.pack(side=tk.LEFT, fill='both', expand=True)
        scrollbar.config(command=self.log_canvas.yview)
        self.logs_inner_frame = tk.Frame(self.log_canvas, bg=self.colors['log_bg'])
        self.log_canvas_window = self.log_canvas.create_window((0, 0), window=self.logs_inner_frame, anchor="nw")
        self.logs_inner_frame.bind("<Configure>", lambda e: self.log_canvas.configure(scrollregion=self.log_canvas.bbox("all")))
        self.log_canvas.bind("<Configure>", lambda e: self.log_canvas.itemconfig(self.log_canvas_window, width=e.width))
        self.add_log("Uygulama ba≈ülatƒ±ldƒ±", "info", "üü¢")

    # ----------------- Yardƒ±mcƒ± fonksiyonlar -----------------
    def lighten_color(self, color):
        if color == self.colors['button_primary']: return '#3399ff'
        if color == self.colors['button_success']: return '#34ce57'
        if color == self.colors['button_danger']: return '#e04b59'
        if color == self.colors['info']: return '#33ccff'
        return '#868e96'

    def add_log(self, message, status="normal", icon="‚è±Ô∏è"):
        now = datetime.now().strftime("%H:%M:%S")
        lbl = tk.Label(self.logs_inner_frame, text=f"{now} {icon} {message}", anchor='w',
                       font=('Consolas', 10), fg=self.colors['text_secondary'], bg=self.colors['log_bg'])
        lbl.pack(fill='x', padx=5, pady=2)
        self.log_canvas.update_idletasks()
        self.log_canvas.yview_moveto(1.0)

    # ----------------- ƒ∞≈ülevler -----------------
    def start_crawl(self):
        person_name = self.person_name.get().strip()
        if not person_name:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen ki≈üi ismini girin!")
            return

        self.add_log(f"Kullanƒ±cƒ±: {person_name} - Tarama ba≈ülatƒ±lƒ±yor...", "info", "üöÄ")
        self.progress['value'] = 0
        self.status_text.config(text="0/361 tamamlandƒ±", fg=self.colors['warning'])
        messagebox.showinfo("Ba≈ülatƒ±lƒ±yor", f"Ki≈üi: {person_name}\n\nTarama i≈ülemi ba≈ülatƒ±lƒ±yor...")

        # >>> BURASI EKLENDƒ∞: pdf.py ve crawler_mongodb.py √ßalƒ±≈ütƒ±rƒ±lƒ±yor <<<
        def run_scripts():
            try:
                self.add_log("pdf.py ba≈ülatƒ±lƒ±yor...", "info", "üìÑ")
                subprocess.Popen([sys.executable, "pdf.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

                self.add_log("crawler_mongodb.py ba≈ülatƒ±lƒ±yor...", "info", "üåê")
                subprocess.Popen([sys.executable, "crawler_mongodb.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

                self.add_log("T√ºm crawler i≈ülemleri ba≈ülatƒ±ldƒ±.", "success", "‚úÖ")
            except Exception as e:
                self.add_log(f"Script ba≈ülatma hatasƒ±: {e}", "error", "‚ùå")
                messagebox.showerror("Hata", f"Script ba≈ülatƒ±lamadƒ±:\n{e}")

        threading.Thread(target=run_scripts, daemon=True).start()

    def restart_crawl(self):
        self.progress['value'] = 0
        self.status_text.config(text="0/361 tamamlandƒ±", fg=self.colors['warning'])
        self.add_log("Tarama yeniden ba≈ülatƒ±lƒ±yor...", "warning", "üîÑ")

    def stop_crawl(self):
        self.progress['value'] = 180
        self.status_text.config(text="180/361 durduruldu", fg=self.colors['warning'])
        self.add_log("Tarama i≈ülemi kullanƒ±cƒ± tarafƒ±ndan durduruldu", "error", "‚èπÔ∏è")

    def generate_report(self):
        self.add_log("Rapor olu≈üturuluyor...", "info", "üìä")
        messagebox.showinfo("Rapor", "Rapor hazƒ±rlanƒ±yor...")

    def add_to_database(self):
        if self.mongo_client is None or self.mongo_db is None or self.mongo_coll is None:
            self.add_log("Mongo baƒülantƒ±sƒ± yok; kayƒ±t yapƒ±lamadƒ±.", "error", "üî¥")
            messagebox.showerror("MongoDB", "Baƒülantƒ± yok.")
            return


if __name__ == "__main__":
    root = tk.Tk()
    app = ModernWebCrawlerUI(root)
    root.mainloop()
